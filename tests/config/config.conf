
# Test comment
## This is also a comment
 ## This is a comment with space as a first character
	## This is a comment with tab as a first character
  	  	## This is a comment with leading spaces and tabs
 ##### Comment with more hash tags

testInt = 123
testFloat = 123.456
testString = Hello World! ## This is not a comment! # This is!

$MY_VAR = 1337
$MY_VAR_2 = $MY_VAR
testVar = $MY_VAR$MY_VAR_2

$EXPR_VAR = {{MY_VAR + 2}}
testExpr = {{EXPR_VAR - 4}}

testEscapedExpr = \{{testInt + 7}}
testEscapedExpr2 = {\{testInt + 7}}
testEscapedExpr3 = \{\{3 + 8}}
testEscapedEscape = \\{{10 - 5}}
testMixedEscapedExpression = {{8 - 10}} \{{ \{{50 + 50}} / \{{10 * 5}} }} 
testMixedEscapedExpression2 = {\{8\\{{10 + 3}}}} should equal "\{{8\13}}"

$ESCAPED_TEXT = \{{10 + 10}}
testImbeddedEscapedExpression = $ESCAPED_TEXT

$MOVING_VAR = 1000
$DYNAMIC_EXPRESSION = moved: {{$MOVING_VAR / 2}} expr: \{{$MOVING_VAR / 2}}
testDynamicEscapedExpression = \{{ $DYNAMIC_EXPRESSION }}

testEnv = $SHELL

source = ./colors.conf

customType = abc

# hyprlang if !NONEXISTENT_VAR

# hyprlang if !NONEXISTENT_VAR_2

testStringColon = ee:ee:ee

# hyprlang endif

# hyprlang if NONEXISTENT_VAR

testStringColon = ee:ee:ee:22

# hyprlang endif

# hyprlang endif

# hyprlang noerror true

errorVariable = true

# hyprlang noerror false

# hyprlang if NONEXISTENT_VAR

customType = bcd

# hyprlang endif

# hyprlang if MY_VAR

categoryKeyword = oops, this one shouldn't call the handler, not fun
testUseKeyword = yes

# hyprlang endif

testCategory {
    testValueInt = 123456
    testValueHex = 0xF

    testColor1   = rgb(255, 255, 255)
    testColor2   = rgba(0,   0,   0,   1.0)
    testColor3   = rgba(ffeeff22)

    testIgnoreKeyword = aaa
    testUseKeyword = no

    nested1 {
        testValueNest = 1
        nested2 {
            testValueNest = 1
        }
        categoryKeyword = this one should not either
    }

    categoryKeyword = we are having fun
    categoryKeyword = so much fun
    categoryKeyword = im the fun one at parties
}

$SPECIALVAL1 = 1

special {
    key = a
    value = $SPECIALVAL1
}

special[b] {
    value = 2
}

specialGeneric {
    one {
        value = 1
        copyTest = 2
    }

    two {
        value = 2
        nonexistent = abc
    }
}

specialAnonymous {
    value = 2
}

specialAnonymous {
    value = 3
}

specialAnonymousNested {
    nested:value1 = 1
    nested:value2 = 2
    nested1:nested2:value1 = 10
    nested1:nested2:value2 = 11
}

specialAnonymousNested {
    nested {
        value1 = 3
        value2 = 4
    }

    nested1 {
        nested2 {
            value1 = 12
            value2 = 13
        }
    }
}

flagsStuff {
    value = 2
}

multiline = \
    very \
        long \
            command

testCategory:testValueHex = 0xFFfFaAbB

$RECURSIVE1 = a
$RECURSIVE2 = $RECURSIVE1b
testStringRecursive = $RECURSIVE2c

testStringQuotes = "Hello World!"
#testDefault = 123

doABarrelRoll = woohoo, some, params # Funny!
flagsabc = test
#doSomethingFunny = 1, 2, 3, 4 # Funnier!
#testSpaces =                abc                             ,                                  def                                  # many spaces, should be trimmed
